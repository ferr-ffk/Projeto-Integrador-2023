{
  "version": 3,
  "sources": ["../../@remix-run/router/history.ts", "../../@remix-run/router/utils.ts", "../../@remix-run/router/router.ts"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction<Context = any> {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponseImpl {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n// We don't want the class exported since usage of it at runtime is an\n// implementation detail, but we do want to export the shape so folks can\n// build their own abstractions around instances via isRouteErrorResponse()\nexport type ErrorResponse = InstanceType<typeof ErrorResponseImpl>;\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers,\n    });\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({ fetchers: new Map(state.fetchers) });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({ fetchers: new Map(state.fetchers) });\n\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission,\n        });\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(\n      submission,\n      existingFetcher ? existingFetcher.data : undefined\n    );\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({ fetchers: new Map(state.fetchers) });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(\n          `${method}() call aborted: ${request.method} ${request.url}`\n        );\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(\n        `${method}() call aborted: ${request.method} ${request.url}`\n      );\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n//#endregion\n"],
  "mappings": "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",
  "names": ["Action", "PopStateEventType", "createMemoryHistory", "options", "initialEntries", "initialIndex", "v5Compat", "entries", "map", "entry", "index", "createMemoryLocation", "state", "undefined", "clampIndex", "length", "action", "Pop", "listener", "n", "Math", "min", "max", "getCurrentLocation", "to", "key", "location", "createLocation", "pathname", "warning", "charAt", "JSON", "stringify", "createHref", "createPath", "history", "createURL", "URL", "encodeLocation", "path", "parsePath", "search", "hash", "push", "Push", "nextLocation", "splice", "delta", "replace", "Replace", "go", "nextIndex", "listen", "fn", "createBrowserHistory", "createBrowserLocation", "window", "globalHistory", "usr", "createBrowserHref", "getUrlBasedHistory", "createHashHistory", "createHashLocation", "substr", "startsWith", "createHashHref", "base", "document", "querySelector", "href", "getAttribute", "url", "hashIndex", "indexOf", "slice", "validateHashLocation", "invariant", "value", "message", "Error", "cond", "console", "warn", "e", "createKey", "random", "toString", "getHistoryState", "idx", "current", "_extends", "_ref", "parsedPath", "searchIndex", "getLocation", "validateLocation", "defaultView", "getIndex", "replaceState", "handlePop", "historyState", "pushState", "error", "DOMException", "name", "assign", "origin", "addEventListener", "removeEventListener", "ResultType", "immutableRouteKeys", "Set", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "mapRouteProperties", "parentPath", "manifest", "treePath", "id", "join", "children", "indexRoute", "pathOrLayoutRoute", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "matchRouteBranch", "safelyDecodeURI", "convertRouteMatchToUiMatch", "match", "loaderData", "params", "data", "handle", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "_route$path", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "paramRe", "dynamicSegmentValue", "indexRouteValue", "emptySegmentValue", "staticSegmentValue", "splatPenalty", "isSplat", "s", "initialScore", "some", "filter", "reduce", "segment", "test", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "matchPath", "Object", "pathnameBase", "normalizePathname", "generatePath", "originalPath", "prefix", "p", "String", "array", "isLastSegment", "star", "keyMatch", "optional", "param", "pattern", "matcher", "paramNames", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "safelyDecodeURIComponent", "regexpSource", "_", "RegExp", "decodeURI", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "getPathContributingMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "getToPathname", "paths", "json", "init", "responseInit", "status", "headers", "Headers", "has", "set", "Response", "AbortedDeferredError", "DeferredData", "constructor", "pendingKeysSet", "subscribers", "deferredKeys", "Array", "isArray", "reject", "abortPromise", "Promise", "r", "controller", "AbortController", "onAbort", "unlistenAbortSignal", "signal", "acc", "trackPromise", "done", "add", "promise", "race", "then", "onSettle", "catch", "defineProperty", "get", "aborted", "delete", "undefinedError", "emit", "settledKey", "subscriber", "subscribe", "cancel", "abort", "v", "k", "resolveData", "resolve", "size", "unwrappedData", "_ref2", "unwrapTrackedPromise", "pendingKeys", "isTrackedPromise", "_tracked", "_error", "_data", "defer", "redirect", "redirectDocument", "response", "ErrorResponseImpl", "statusText", "internal", "isRouteErrorResponse", "validMutationMethodsArr", "validMutationMethods", "validRequestMethodsArr", "validRequestMethods", "redirectStatusCodes", "redirectPreserveMethodStatusCodes", "IDLE_NAVIGATION", "formMethod", "formAction", "formEncType", "formData", "text", "IDLE_FETCHER", "IDLE_BLOCKER", "proceed", "reset", "ABSOLUTE_URL_REGEX", "defaultMapRouteProperties", "hasErrorBoundary", "Boolean", "createRouter", "routerWindow", "isBrowser", "createElement", "isServer", "detectErrorBoundary", "dataRoutes", "inFlightDataRoutes", "future", "v7_normalizeFormMethod", "v7_prependBasename", "unlistenHistory", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "initialErrors", "getInternalRouterError", "getShortCircuitMatches", "initialized", "m", "lazy", "loader", "router", "historyAction", "navigation", "restoreScrollPosition", "preventScrollReset", "revalidation", "actionData", "errors", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeDeferreds", "blockerFunctions", "ignoreNextHistoryUpdate", "initialize", "blockerKey", "shouldBlockNavigation", "currentLocation", "updateBlocker", "updateState", "startNavigation", "dispose", "clear", "deleteFetcher", "deleteBlocker", "newState", "completeNavigation", "_location$state", "_location$state2", "isActionReload", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "getSavedScrollPosition", "navigate", "opts", "normalizedPath", "normalizeTo", "fromRouteId", "relative", "submission", "normalizeNavigateOptions", "userReplace", "pendingError", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "request", "createClientSideRequest", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "getLoadingNavigation", "Request", "handleLoaders", "fetcherSubmission", "getSubmittingNavigation", "actionMatch", "getTargetMatch", "type", "method", "routeId", "callLoaderOrAction", "isRedirectResult", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "activeSubmission", "getSubmissionFromNavigation", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "updatedFetchers", "markFetchRedirectsDone", "rf", "fetcher", "revalidatingFetcher", "getLoadingFetcher", "abortFetcher", "abortPendingFetchRevalidations", "f", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "findRedirect", "fetcherKey", "processLoaderData", "deferredData", "didAbortFetchLoads", "abortStaleFetchLoads", "shouldUpdateFetchers", "getFetcher", "fetch", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "getSubmittingFetcher", "abortController", "fetchRequest", "originatingLoadId", "actionResult", "doneFetcher", "getDoneFetcher", "loadingFetcher", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "resolveDeferredData", "_temp", "redirectLocation", "isDocumentReload", "reloadDocument", "redirectHistoryAction", "currentMatches", "fetchersToLoad", "all", "resolveDeferredResults", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "newBlocker", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "getScrollKey", "_internalSetRoutes", "newRoutes", "_internalFetchControllers", "_internalActiveDeferreds", "UNSAFE_DEFERRED_SYMBOL", "Symbol", "createStaticHandler", "query", "_temp2", "requestContext", "isValidMethod", "methodNotAllowedMatches", "statusCode", "loaderHeaders", "actionHeaders", "queryImpl", "isResponse", "queryRoute", "_temp3", "find", "values", "_result$activeDeferre", "routeMatch", "submit", "loadRouteData", "isQueryRouteResponse", "isRedirectResponse", "isRouteRequest", "isStaticRequest", "Location", "context", "loaderRequest", "getLoaderMatchesUntilBoundary", "processRouteLoaderData", "executedLoaders", "fromEntries", "getStaticContextFromError", "newContext", "_deepestRenderedBoundaryId", "isSubmissionNavigation", "body", "prependBasename", "contextualMatches", "activeRouteMatch", "hasNakedIndexQuery", "normalizeFormMethod", "isFetcher", "getInvalidBodyError", "rawFormMethod", "toUpperCase", "stripHashFromPath", "FormData", "URLSearchParams", "_ref3", "parse", "searchParams", "convertFormDataToSearchParams", "convertSearchParamsToFormData", "append", "boundaryId", "boundaryMatches", "findIndex", "currentUrl", "nextUrl", "navigationMatches", "isNewLoader", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "nextParams", "defaultShouldRevalidate", "isNewRouteInstance", "fetcherMatches", "fetcherMatch", "shouldRevalidate", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "loaderMatch", "arg", "routeChoice", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "resultType", "onReject", "runHandler", "handler", "handlerError", "protocol", "isSameBasename", "queryRouteResponse", "contentType", "isDeferredData", "_result$init", "_result$init2", "deferred", "foundError", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "_temp4", "errorMessage", "obj", "signals", "isRevalidatingLoader", "unwrap", "getAll", "pathMatches"]
}
